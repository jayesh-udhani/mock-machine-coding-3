package services;
import models.*;
import java.util.*;
import exceptions.*;

public class ApplicationService {
	private Application application;
	
	public ApplicationService(Application application) {
		this.application = application;
	}
	
	public boolean createBoard(String name) {
		Board newBoard = new Board(name);
		application.getBoards().put(newBoard.getId(),newBoard);
		System.out.println("Created board: "+newBoard.getId());
		return true;
	}
	
	public boolean deleteBoard(UUID boardID) throws BoardNotFoundException{
		if(!application.getBoards().containsKey(boardID)) {
			throw new BoardNotFoundException("The board which you are trying to delete doesn't exists");
		}
	}
	
	public boolean createList(UUID boardID,String name) throws BoardNotFoundException{
		if(!application.getBoards().containsKey(boardID)) {
			throw new BoardNotFoundException("The board in which you are trying to create the list doesn't exists");
		}
		BoardList newList = new BoardList(name, application.getBoards().get(boardID));
		application.getBoards().get(boardID).addList(newList);
		application.getLists().put(newList.getId(),newList);
		return true;
	}
	
	public boolean deleteList(UUID listId) throws ListNotFoundException{
		if(!application.getLists().containsKey(listId)) {
			throw new ListNotFoundException("The list which you are trying to delete doesn't exists");
		}
	}
	
	public boolean createCard(UUID listId,String name) throws ListNotFoundException{
		if(!application.getLists().containsKey(listId)) {
			throw new ListNotFoundException("The list in which you are trying to create the card doesn't exists");
		}
		Card newCard = new Card(name, application.getLists().get(listId));
		application.getLists().get(listId).addCard(newCard);
		application.getCards().put(newCard.getId(), newCard);
		return true;
	}
	
	public boolean deleteCard(UUID cardId) throws CardNotFoundException{
		if(!application.getCards().containsKey(cardId)) {
			throw new CardNotFoundException("The card which you are trying to delete doesn't exists");
		}
		Card cardToDelete = application.getCards().get(cardId);
		application.getLists().get(cardToDelete.getList().getId()).removeCard(cardToDelete);
		application.getCards().remove(cardId);
		return true;
	}
	
	public boolean assignCardToMember(UUID cardId,String email) throws CardNotFoundException {
		if(!application.getCards().containsKey(cardId)) {
			throw new CardNotFoundException("The card which you are trying to assign doesn't exists");
		}
		
		application.getCards().get(cardId).setAssignee(application.getUsers().get(email));
		return true;
	}
	
	public boolean unassignCard(UUID cardId) throws CardNotFoundException {
		if(!application.getCards().containsKey(cardId)) {
			throw new CardNotFoundException("The card which you are trying to unassign doesn't exists");
		}
		
		application.getCards().get(cardId).setAssignee(null);
		return true;
	}
	
	public boolean setCardName(UUID cardId,String name) throws CardNotFoundException{
		if(!application.getCards().containsKey(cardId)) {
			throw new CardNotFoundException("The card which you are trying to unassign doesn't exists");
		}
		
		application.getCards().get(cardId).setName(name);
		return true;
	}
	
	public boolean setCardDescription(UUID cardId,String description) throws CardNotFoundException{
		if(!application.getCards().containsKey(cardId)) {
			throw new CardNotFoundException("The card which you are trying to unassign doesn't exists");
		}
		
		application.getCards().get(cardId).setName(description);
		return true;
	}
}
